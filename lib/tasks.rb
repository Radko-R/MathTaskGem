class Tasks
  TASK_1 = "Даны два действительных числа a и b. Получить их сумму, разность и произведение."
  TASK_2 = "Даны действительные числа x и y. Получить (|x|-|y|)/(1+|xy|)."
  TASK_3 = "Дана длина ребра куба. Найти объем куба и площадь его боковой поверхности."
  TASK_4 = "Даны два действительных положительных числа. Найти среднее арифметическое и среднее геометрическое этих чисел."
  TASK_5 = "Даны два действительных числа. Найти среднее арифметическое этих чисел и среднее геометрическое их модулей."
  TASK_6 = "Даны катеты прямоугольного треугольника. Найти его гипотенузу и площадь."
  TASK_7 = "Смешано v1 литров воды температуры t1 с v2 литрами воды температуры t2 . Найти объем и температуру образовавшейся смеси."
  TASK_8 = "Определить периметр правильного n-угольника,описанного около окружности радиуса r."
  TASK_9 = "Даны два действительных числа a и b. Получить их сумму, разность и произведение."
  TASK_10 = "Определить время падения камня на поверхность земли с высоты h."
  TASK_12 = "Дана сторона равностороннего треугольника. Найти площадь этого треугольника."
  TASK_13 = "Вычислить период колебания маятника длины l."
  TASK_14 = "Определить силу притяжения F между телами массы m1 и m2 , находящимися на расстоянии r друг от друга."
  TASK_15 = "Даны гипотенуза и катет прямоугольного треугольника. Найти второй катет и радиус вписанной окружности."
  TASK_16 = "Известна длина окружности. Найти площадь круга, ограниченного этой окружностью."
  TASK_17 = "Найти площадь кольца, внутренний радиус которого равен 20, а внешний – заданному числу r (r>20)."
  TASK_18 = "Треугольник задан величинами своих углов и радиусом описанной окружности. Найти стороны треугольника."
  TASK_19 = "Определить время, через которое встретятся два тела, равноускоренно движущиеся навстречу друг другу, если известны их начальные скорости, ускорения и начальное расстояние между ними."
  TASK_20 = " Найти сумму членов арифметической прогрессии a, a+ d ,...,a+(n-1)d по данным значениям a, d, n."
  TASK_22 = "Найти площадь равнобочной трапеции с основаниями a и b и углом α при большем основании а."
  TASK_24 = "Вычислить расстояние между двумя точками с координатами x1 , y1 и x2 , y2."
  TASK_25 = "Треугольник задан координатами своих вершин. Найти:
                  а) периметр треугольника;
                  б) площадь треугольника."
  TASK_26 = "Найти площадь сектора, радиус которого равен 13.7, а дуга содержит заданное число радиан φ."
  TASK_27 = "Даны действительные положительные числа а, b, c. По трем сторонам с длинами a, b, c можно построить треугольник. Найти углы треугольника."
  TASK_28 = "Дано действительное число х. Не пользуясь никакими другими арифметическими операциями, кроме умножения, сложения и вычитания, вычислить:
                  2x**4-3x**3+4x**2-5x+6
                  Разрешается использовать не более четырех умножений и четырех сложений и вычитаний."
  TASK_29 = "Даны действительные числа х, у. Не пользуясь никакими операциями, кроме умножения, сложения и вычитания, вычислить 3 x 2 y 2 − 2 xy 2 − 7 x 2 y − 4 y 2 + 15 xy + 2 x 2 − 3 x + 10 y + 6 .
             Разрешается использовать не более восьми умножений и восьми сложений и вычитаний."
  TASK_33 = "Даны действительные числах,у. Получить:
                  а) max (x,y); б) min (x,y);
                  в) max (x,y) , min (x,y)."
  TASK_34 = "Даны действительные числа x, y, z. Получить: а) max (x, y, z); б) min (x, y, z), max(x, y, z)."
  TASK_36 = "Даны действительные числа a,b,c. Проверить, выполняются ли неравенства a < b < c."
  TASK_37 = "Даны действительные числа a,b,c. Удвоить эти числа, если a ≥ b ≥ c , и заменить их абсолютными значениями, если это не так."
  TASK_38 = "Даны два действительных числа a и b. Получить их сумму, разность и произведение."
  TASK_39 = "Даны два действительных числа. Вывести первое число, если оно больше второго, и оба числа, если это не так."
  TASK_40 = "Даны два действительных числа. Заменить первое число нулем, если оно меньше или равно второму, и оставить числа без изменения в противном случае."
  TASK_42 = "Даны действительные числаx, y (x≠ y). Меньшее из этих двух чисел заменить их полусуммой, а большее – их удвоенным произведением."
  TASK_43 = "Даны три действительных числа. Возвести в квадрат те из них, значения которых неотрицательны."
  TASK_45 = "Даны действительные числа a,b,c,d. Если a≤ b ≤ c ≤ d, то каждое число заменить наибольшим из них; если a>b>c>d, то оставить без изменения; в противном случае все числа заменяются их квадратами."
  TASK_47 = "Даны действительные положительные числа x,y,z. а) Выяснить существует ли треугольник с длинами сторонx,y,z. б) Если треугольник существует, то ответить – является ли он остроугольным."
  TASK_61 = "Дано действительное число х. Получить целую часть числа х; затем – число х, округленное до ближайшего целого; затем – число x без дробных цифр."
  TASK_62 = "Определить, является ли данное целое число четным."
  TASK_64 = "Дано натуральное числоn (n>99). Определить число сотен в нем."
  TASK_65 = "Дано натуральное числоn (n>99). Выяснить, верно ли, что n2 равно кубу суммы цифр числа n."
  TASK_66 = "Даны целые числа k,m, действительные числа x,y,z. При k<m2 ,k=m2 илиk>m2 заменить модулем соответственно значенияx,y илиz, а два других значения уменьшить на 0.5."
  TASK_142 = "Вычислить значения многочлена x 5 − 9 x 4 + 1 . 7 x 2 − 9 . 6 для x = 0, 1, ..., 5."
  TASK_224 = "Дано натуральное число n. Получить все его натуральные делители."
  TASK_225 = "Дано натуральное число n. Получить все такие натуральные q, что n делится на q 2 и не делится на q 3 ."
  TASK_226 = "Даны натуральные числа m, n. Получить все их натуральные общие кратные, меньшие mn."
  TASK_251 = "Даны натуральное число n, символы s 1 , ..., s n . Подсчитать, сколько раз среди данных символов встречается буква x."
  TASK_252 = "Даны натуральное число n, символы s 1 , ..., s n . Подсчитать:
              а) сколько раз среди данных символов встречается символ + и сколько раз символ ∗ ;
              б) общее число вхождений символов +, –, * в последовательность s 1 ,...,s n"
  TASK_822 = "Дан номер года. Указать число дней в этом году."
 
  class << self
    include Math

    def task1(a,b)
      { sum: a+b,
        diff: a-b,
        multiply: a*b }
    end

    def task2(x, y)
      { result: (x.abs - y.abs) / (1 + (x.abs * y.abs)) }
    end

    def task3(x)
      { volume: x**3,
        side_surface: x**2 }
    end

    def task4(x, y)
      { average: (x * y) / 2,
        geometric_mean: Math.sqrt((x * y)).round(2) }
    end

    def task5(x, y)
      { average: (x + y) / 2,
        geometric_mod: Math.sqrt((x.abs * y.abs)).round(2) }
    end

    def task6(x, y)
      { hypotenuse: Math.sqrt(x**2 + y**2).round(2),
        square: x * y / 2 }
    end

    def task7(x1, y1, x2, y2)
      { volume: (x1 + x2).to_f,
        temperature: ((x1 * y1 + x2 * y2) / x).round(2) }
    end

    def task8(n, r)
      { perimeter: (2 *n * r * Math.tan(Math::PI / n)).round(2) }
    end

    def task9(r1, r2, r3)
      { sum_resistance: (1/(1.0 / r1 + 1.0 / r2 + 1.0 / r3)).round(2) }
    end

    def task10(h)
      { time: Math.sqrt(2 * h / 9.8).round(2) }
    end

    def task12(s)
      { square: (s**2 * Math.sqrt(3) / 4).round(2) }
    end

    def task13(l)
      { period: (2**Math::PI * Math.sqrt(l) / 9.8).round(2) }
    end

    def task14(m1, m2, d)
      { gravity: m1 * m2 * 6.67e-11 / d**2 }
    end

    def task15(a, c)
      b = Math.sqrt(c**2 - a**2).round 2
      radius = ((a + b - c) / 2).round 2
      { b: b,
        radius: radius }
    end



    def task16(c)
      { area: (c**2 / (Math::PI * 4)).round(2) }
    end

    def task17(r2, r1)
      { area: (Math::PI * (r2**2 - r1**2)).round(2) }
    end

    def task18(a, b, r)
      c = 180 - a - b
      { sides: [a, b, c].map { |i| (2 * r * sin(i / (360/(2 * Math::PI))).round(2))  }}
    end

    def task19(v1, v2, a1, a2, s)
      { time: ((- (v1 + v2) + Math.sqrt((v1 + v2) * (v1 + v2) + 2 * (a1 + a2) * s)) / (a1 + a2)).round(2) }
    end

    def task20(a, b, n)
      { sum: (2 * a + (n - 1) * b) * n / 2 }
    end

    def task22(x1, x2, angle)
      { square: (((x1 + x2) * ((x1 - x2).abs / 2) * Math.sin(angle * Math::PI / 180) / \
      Math.cos(angle * Math::PI / 180)) / 2).round(2) }
    end

    def task24(x1, x2, y1, y2)
      { distance: Math.sqrt((x1 - x2)**2 + (y1 - y2)**2).round(2) }
    end

    def task25(x1, y1, x2, y2, x3, y3)
      a = Math.sqrt(Math.sqrt((x2 - x1).abs) + Math.sqrt((y2 - y1).abs))
      b = Math.sqrt(Math.sqrt((x3 - x2).abs) + Math.sqrt((y3 - y2).abs))
      c = Math.sqrt(Math.sqrt((x1 - x3).abs) + Math.sqrt((y1 - y3).abs))
      p = ((a + b + c) / 2).round 2
      s = Math.sqrt(p * (p - a) * (p - b) * (p - c)).round 2
      { perimeter: p,
        square: s }
    end

    def task26(r, angle_radian)
      { square: (r * r * angle_radian / 2).round(2) }
    end

    def task27(a, b, c)
      s = a.to_f + b.to_f + c.to_f
      x = (a / s * 180).round 2
      y = (b / s * 180).round 2
      z = (c / s * 180).round 2
      { angle1: x,
        angle2: y,
        angle3: z }
    end

    def task28(x)
      { result: 2*x*x*x*x-3*x*x*x+4*x*x-5*x+6  }
    end

    def task29(x, y)
      { result: (3*(x*x)*(y*y))-(2*x*(y*y))-(7*(x*x)*y)-(4*(y*y))+(15*x*y)+(2*(x*x))-(3*x)+(10*y)+6  }
    end

    def task33(x, y)
      { max: x > y ? x : y,
        min: x > y ? y : x }
    end

    def task34(x, y, z)
      if x > y
        max = x
        min = y
      else
        max = y
        min = x
      end
      if z > max
        max = z
      else
        min = z
      end
      { max: max,
        min: min }
    end

    def task36(x, y, z)
      { result: x < y && y < z ? true : false }
    end

    def task37(x, y, z)
      if x >= y && y >= z
        x *= 2
        y *= 2
        z *= 2
      else
        x = x.abs
        y = y.abs
        z = z.abs
      end
      { x: x,
        y: y,
        z: z }
    end

    def task38(x, y)
      { z: x > y ? x - y : y - x + 1 }
    end

    def task39(x, y)
      { result: x > y ? x : [x, y] }
    end

    def task40(x, y)
      x = 0 if x <= y
      { x: x, y: y }
    end

    def task42(x, y)
      if x > y
        y = (x + y) / 2
        x = (x + y) * 2
      else
        x = (x + y) / 2
        y = (x + y) * 2
      end
      { x: x, y: y }
    end

    def task43(x, y, z)
      x **= 2 if x >= 0
      y **= 2 if y >= 0
      z **= 2 if z >= 0
      { x: x, y: y, z: z }
    end

    def task45(a, b, c, d)
      num = [a, b, c, d]
      if a <= b && a <= b && b <= c && c <= d
        num.map! { |i| i = d }
      elsif a > b && a > b && b > c && c > d
        num.map! { |i| i }
      else
        num.map! { |i| i**2 }
      end
      { result: num }
    end

    def task47(a, b, c)
      if a < (b + c) && b < (a + c) && c < (a + b)
        if a == b || b == c || a == c
          if a == b && b == c && a == c
            { result: "equilateral triangle" }
          else
            { result: "isosceles triangle" }
          end
        else
          { result: "arbitrary triangle" }
        end
      else
        { result: "not triangle" }
      end
    end

    def task61(x)
      a = x.floor
      b = x.round
      c = x.truncate
      { a: a, b: b, c: c }
    end

    def math62(x)
      { result: x.even? }
    end

    def self.task64(x)
      { result: (x / 100).to_i }
    end

    def math65(n)
      if n > 99 || n <= 0
        puts "Error! 0 < n <= 99"
      end
      a = n / 10
      b = n % 10
      result = n**2 == (a + b)**3 ? true : false
      { result: result }
    end

    def task66(k, m, x, y, z)
      if k < m**2
        x = x.abs
        y -= 0.5
        z -= 0.5
      elsif k == m**2
        y = y.abs
        x -= 0.5
        z -= 0.5
      else
        z = z.abs
        x -= 0.5
        y -= 0.5
      end
      { x: x, y: y, z: z }
    end

    def task142(x)
      array = []
      (x..5).each { |x| array << (x**5 - 9 * x**4 + 1.7 * x**2 - 9.6).round(1) }
      { result: array }
    end

    def task224(n)
      array = []
      (1..n).each { |i| array << i if n % i == 0 }
      { result: array }
    end

    def task225(n)
      array = []
      (1..n).each { |q| array << q if n % q**2 == 0 && n % q**3 != 0 }
      { result: array }
    end

    def task226(m, n)
      array = []
      (1...m * n).each { |x| array << x if x % m == 0 && x % n == 0 }
      { result: array }
    end

    def task251(string)
      { result: string.count("x") }
    end

    def task252(string)
      { plus: string.count('+'),
        multiply: string.count('*'),
        all: string.count('+') + string.count('-') + string.count('*') }
    end


    def task822(n)
      (n % 4).zero? ? "366 days" : "365 days"
    end


  end
end
